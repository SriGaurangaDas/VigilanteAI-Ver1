
'use client';

import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from '@/components/ui/accordion';
import { Badge } from '@/components/ui/badge';
import { Vulnerability } from '@/lib/definitions';
import { cn } from '@/lib/utils';
import { ShieldAlert, ShieldCheck, ShieldHalf, ShieldQuestion, Sparkles } from 'lucide-react';
import { explainVulnerability } from '@/ai/flows/explain-vulnerability';
import { suggestFixes } from '@/ai/flows/suggest-fixes';
import { useState } from 'react';
import { Button } from '../ui/button';
import { Loader2 } from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle } from '../ui/card';
import { Separator } from '../ui/separator';
import { marked } from 'marked';
import { Skeleton } from '../ui/skeleton';

type VulnerabilityDetailsProps = {
  vulnerabilities: Vulnerability[];
  scanOutput: string; // Raw scan output for context
};

const severityMap = {
  Critical: {
    icon: ShieldAlert,
    className:
      'bg-red-500/10 text-red-500 border-red-500/20 hover:bg-red-500/20',
  },
  High: {
    icon: ShieldAlert,
    className:
      'bg-orange-500/10 text-orange-500 border-orange-500/20 hover:bg-orange-500/20',
  },
  Medium: {
    icon: ShieldHalf,
    className:
      'bg-yellow-500/10 text-yellow-500 border-yellow-500/20 hover:bg-yellow-500/20',
  },
  Low: {
    icon: ShieldCheck,
    className:
      'bg-blue-500/10 text-blue-500 border-blue-500/20 hover:bg-blue-500/20',
  },
};

function AiContent({
  vulnerability,
  scanOutput,
}: {
  vulnerability: Vulnerability;
  scanOutput: string;
}) {
  const [explanation, setExplanation] = useState<string | null>(null);
  const [fixes, setFixes] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [hasGenerated, setHasGenerated] = useState(false);

  const handleGenerate = async () => {
    setIsLoading(true);
    setHasGenerated(true);
    setExplanation(null);
    setFixes(null);
  
    // Use Promise.allSettled to ensure both calls complete regardless of individual success
    const [explanationResult, fixesResult] = await Promise.allSettled([
      explainVulnerability({ vulnerabilityDetails: JSON.stringify(vulnerability) }),
      suggestFixes({
        vulnerabilityDescription: vulnerability.description,
        scanOutput,
      })
    ]);
  
    if (explanationResult.status === 'fulfilled') {
      setExplanation(explanationResult.value.explanation);
    } else {
      console.error('Failed to get AI explanation:', explanationResult.reason);
      setExplanation('Could not load AI-powered explanation.');
    }
  
    if (fixesResult.status === 'fulfilled') {
      setFixes(fixesResult.value.suggestedFixes);
    } else {
      console.error('Failed to get AI fixes:', fixesResult.reason);
      setFixes('Could not load AI-powered remediation steps.');
    }
  
    setIsLoading(false);
  };

  if (!hasGenerated) {
    return (
      <div className="flex flex-col items-center justify-center gap-4 rounded-lg border-2 border-dashed bg-muted/50 p-8 text-center">
        <h3 className="font-semibold">Remediation Assistant</h3>
        <p className="text-sm text-muted-foreground">
          Generate a detailed explanation and ready-to-use code fixes with AI.
        </p>
        <Button onClick={handleGenerate} disabled={isLoading}>
          {isLoading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
          Generate Fixes
        </Button>
      </div>
    );
  }

  return (
    <div className="space-y-6 relative">
      {isLoading && (
          <div className="absolute inset-0 bg-background/50 flex items-center justify-center z-10 rounded-md">
              <Loader2 className="h-8 w-8 animate-spin text-primary" />
          </div>
      )}
      
      <div className="grid md:grid-cols-2 gap-6">
        <Card>
            <CardHeader>
            <CardTitle className="text-lg">AI Explanation</CardTitle>
            </CardHeader>
            <CardContent className="prose prose-sm dark:prose-invert max-w-none prose-pre:bg-muted/50 prose-pre:p-4 prose-pre:rounded-md prose-code:bg-muted/50 prose-code:px-1.5 prose-code:py-1 prose-code:rounded">
            {explanation ? (
                <div dangerouslySetInnerHTML={{ __html: marked(explanation) as string }} />
            ) : <Skeleton className="h-24 w-full" />}
            </CardContent>
        </Card>

        <Card>
            <CardHeader>
            <CardTitle className="text-lg">Suggested Fixes</CardTitle>
            </CardHeader>
            <CardContent className="prose prose-sm dark:prose-invert max-w-none prose-pre:bg-muted/50 prose-pre:p-4 prose-pre:rounded-md prose-code:bg-muted/50 prose-code:px-1.5 prose-code:py-1 prose-code:rounded">
            {fixes ? (
                <div dangerouslySetInnerHTML={{ __html: marked(fixes) as string }} />
            ) : <Skeleton className="h-24 w-full" />}
            </CardContent>
        </Card>
      </div>
      
      <Separator />

      <div className="space-y-4">
        <h4 className="font-semibold">Details from Scanner</h4>
        <div className="text-sm space-y-2 text-muted-foreground">
            {vulnerability.cwe && <p><strong>CWE:</strong> <code className='font-code bg-muted px-1.5 py-1 rounded'>{vulnerability.cwe}</code></p>}
            {vulnerability.evidence && <p><strong>Evidence:</strong> <span className='font-code'>{vulnerability.evidence}</span></p>}
        </div>
      </div>

    </div>
  );
}

export function VulnerabilityDetails({
  vulnerabilities,
  scanOutput,
}: VulnerabilityDetailsProps) {
  return (
    <Accordion type="single" collapsible className="w-full">
      {vulnerabilities.map((vuln) => {
        const severity = vuln.assessedSeverity || vuln.severity;
        const severityInfo =
          severityMap[severity as keyof typeof severityMap] || {};
        const Icon = severityInfo.icon || ShieldQuestion;

        return (
          <AccordionItem key={vuln.id} value={vuln.id}>
            <AccordionTrigger className="hover:no-underline">
              <div className="flex items-center gap-4 w-full">
                <Icon className={cn('h-5 w-5 shrink-0', severityInfo.className)} />
                <span className="flex-1 text-left font-medium">{vuln.name}</span>
                <Badge
                  variant="outline"
                  className={cn('font-semibold', severityInfo.className)}
                >
                   {vuln.assessedSeverity && <Sparkles className="h-3 w-3 mr-1.5" />}
                  {severity}
                </Badge>
              </div>
            </AccordionTrigger>
            <AccordionContent className="p-4 bg-muted/30 rounded-b-md border-t">
              {vuln.assessmentJustification && (
                 <div className="mb-4 p-3 rounded-md bg-blue-500/10 border border-blue-500/20 text-sm">
                    <p className='font-semibold flex items-center gap-2'><Sparkles className="h-4 w-4 text-blue-400" /> AI Severity Assessment</p>
                    <p className="text-muted-foreground mt-1">{vuln.assessmentJustification}</p>
                 </div>
              )}
              <p className="mb-6 text-sm text-muted-foreground">
                {vuln.description}
              </p>
              <AiContent vulnerability={vuln} scanOutput={scanOutput} />
            </AccordionContent>
          </AccordionItem>
        );
      })}
    </Accordion>
  );
}
