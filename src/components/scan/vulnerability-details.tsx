'use client';

import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from '@/components/ui/accordion';
import { Badge } from '@/components/ui/badge';
import { Vulnerability } from '@/lib/definitions';
import { cn } from '@/lib/utils';
import { ShieldAlert, ShieldCheck, ShieldHalf, ShieldQuestion } from 'lucide-react';
import { explainVulnerability } from '@/ai/flows/explain-vulnerability';
import { suggestFixes } from '@/ai/flows/suggest-fixes';
import { useState } from 'react';
import { Button } from '../ui/button';
import { Loader2 } from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle } from '../ui/card';
import { Separator } from '../ui/separator';
import { marked } from 'marked';

type VulnerabilityDetailsProps = {
  vulnerabilities: Vulnerability[];
  scanOutput: string; // Raw scan output for context
};

const severityMap = {
  Critical: {
    icon: ShieldAlert,
    className:
      'bg-red-500/10 text-red-500 border-red-500/20 hover:bg-red-500/20',
  },
  High: {
    icon: ShieldAlert,
    className:
      'bg-orange-500/10 text-orange-500 border-orange-500/20 hover:bg-orange-500/20',
  },
  Medium: {
    icon: ShieldHalf,
    className:
      'bg-yellow-500/10 text-yellow-500 border-yellow-500/20 hover:bg-yellow-500/20',
  },
  Low: {
    icon: ShieldCheck,
    className:
      'bg-blue-500/10 text-blue-500 border-blue-500/20 hover:bg-blue-500/20',
  },
};

function AiContent({
  vulnerability,
  scanOutput,
}: {
  vulnerability: Vulnerability;
  scanOutput: string;
}) {
  const [explanation, setExplanation] = useState<string | null>(null);
  const [fixes, setFixes] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);

  const handleGenerate = async () => {
    setIsLoading(true);
    try {
      const [explanationRes, fixesRes] = await Promise.all([
        explainVulnerability({ vulnerabilityDetails: JSON.stringify(vulnerability) }),
        suggestFixes({
          vulnerabilityDescription: vulnerability.description,
          scanOutput,
        }),
      ]);
      setExplanation(explanationRes.explanation);
      setFixes(fixesRes.suggestedFixes);
    } catch (error) {
      console.error('Failed to get AI analysis:', error);
      setExplanation('Could not load AI-powered explanation.');
      setFixes('Could not load AI-powered remediation steps.');
    }
    setIsLoading(false);
  };

  if (!explanation && !fixes) {
    return (
      <div className="flex flex-col items-center justify-center gap-4 rounded-lg border-2 border-dashed bg-muted/50 p-8 text-center">
        <h3 className="font-semibold">AI-Powered Analysis</h3>
        <p className="text-sm text-muted-foreground">
          Generate a detailed explanation and remediation steps using AI.
        </p>
        <Button onClick={handleGenerate} disabled={isLoading}>
          {isLoading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
          Generate Analysis
        </Button>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {isLoading && (
          <div className="absolute inset-0 bg-background/50 flex items-center justify-center z-10">
              <Loader2 className="h-8 w-8 animate-spin text-primary" />
          </div>
      )}
      <Card>
        <CardHeader>
          <CardTitle className="text-lg">AI Explanation</CardTitle>
        </CardHeader>
        <CardContent className="prose prose-sm dark:prose-invert max-w-none">
          {explanation ? (
            <div dangerouslySetInnerHTML={{ __html: marked(explanation) as string }} />
          ) : <div className="text-muted-foreground">Generating...</div>}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle className="text-lg">Suggested Fixes</CardTitle>
        </CardHeader>
        <CardContent className="prose prose-sm dark:prose-invert max-w-none">
          {fixes ? (
             <div dangerouslySetInnerHTML={{ __html: marked(fixes) as string }} />
          ) : <div className="text-muted-foreground">Generating...</div>}
        </CardContent>
      </Card>
      
      <Separator />

      <div className="space-y-4">
        <h4 className="font-semibold">Details</h4>
        <div className="text-sm space-y-2">
            <p><strong>CWE:</strong> <code className='font-code bg-muted px-1 py-0.5 rounded'>{vulnerability.cwe}</code></p>
            <p><strong>Evidence:</strong> <span className='text-muted-foreground'>{vulnerability.evidence}</span></p>
        </div>
      </div>

    </div>
  );
}

export function VulnerabilityDetails({
  vulnerabilities,
  scanOutput,
}: VulnerabilityDetailsProps) {
  return (
    <Accordion type="single" collapsible className="w-full">
      {vulnerabilities.map((vuln) => {
        const severityInfo =
          severityMap[vuln.severity as keyof typeof severityMap] || {};
        const Icon = severityInfo.icon || ShieldQuestion;

        return (
          <AccordionItem key={vuln.id} value={vuln.id}>
            <AccordionTrigger className="hover:no-underline">
              <div className="flex items-center gap-4">
                <Icon className={cn('h-5 w-5', severityInfo.className)} />
                <span className="flex-1 text-left font-medium">{vuln.name}</span>
                <Badge
                  variant="outline"
                  className={cn('font-semibold', severityInfo.className)}
                >
                  {vuln.severity}
                </Badge>
              </div>
            </AccordionTrigger>
            <AccordionContent className="p-4 bg-muted/30 rounded-b-md border-t">
              <p className="mb-6 text-sm text-muted-foreground">
                {vuln.description}
              </p>
              <AiContent vulnerability={vuln} scanOutput={scanOutput} />
            </AccordionContent>
          </AccordionItem>
        );
      })}
    </Accordion>
  );
}
