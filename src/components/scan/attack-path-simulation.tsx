
'use client';

import { useEffect, useState } from 'react';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import { generateAttackStory, GenerateAttackStoryOutput } from '@/ai/flows/generate-attack-story';
import type { Scan } from '@/lib/definitions';
import { Skeleton } from '../ui/skeleton';
import { Footprints, GanttChartSquare, Target } from 'lucide-react';
import { Separator } from '../ui/separator';

export function AttackPathSimulation({ scan }: { scan: Scan }) {
  const [story, setStory] = useState<GenerateAttackStoryOutput | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    async function fetchData() {
      setIsLoading(true);
      setError(null);
      try {
        const result = await generateAttackStory({ scanDetails: JSON.stringify(scan) });
        setStory(result);
      } catch (err) {
        console.error('Failed to generate attack story:', err);
        setError('Could not load AI-generated attack path.');
      }
      setIsLoading(false);
    }
    fetchData();
  }, [scan]);
  
  const icons = [Target, Footprints, GanttChartSquare, Footprints, Target];

  if (isLoading) {
    return (
        <Card>
            <CardHeader>
                <CardTitle className="flex items-center gap-2"><GanttChartSquare /> Attack Path Simulation</CardTitle>
                <CardDescription>A plausible attack narrative generated by AI based on the findings.</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
                {[...Array(3)].map((_, i) => (
                    <div key={i} className="flex gap-4">
                        <Skeleton className="h-10 w-10 rounded-full" />
                        <div className="space-y-2 flex-1">
                            <Skeleton className="h-5 w-1/3" />
                            <Skeleton className="h-4 w-full" />
                        </div>
                    </div>
                ))}
            </CardContent>
        </Card>
    );
  }

  if (error || !story || !story.attackStory || story.attackStory.length === 0) {
    return (
       <Card>
            <CardHeader>
                 <CardTitle className="flex items-center gap-2"><GanttChartSquare /> Attack Path Simulation</CardTitle>
                 <CardDescription>A plausible attack narrative generated by AI based on the findings.</CardDescription>
            </CardHeader>
            <CardContent>
                <p className="text-sm text-muted-foreground">{error || "No attack path could be generated for this scan."}</p>
            </CardContent>
        </Card>
    );
  }


  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2"><GanttChartSquare /> Attack Path Simulation</CardTitle>
        <CardDescription>A plausible attack narrative generated by AI based on the findings.</CardDescription>
      </CardHeader>
      <CardContent>
        <div className="relative space-y-6">
            <div className="absolute left-5 top-5 bottom-5 w-0.5 bg-border -z-10" />
             {story.attackStory.map((step, index) => {
                const Icon = icons[index % icons.length];
                return (
                    <div key={step.step} className="flex items-start gap-4">
                         <div className="flex h-10 w-10 items-center justify-center rounded-full bg-muted border">
                            <Icon className="h-5 w-5 text-primary" />
                        </div>
                        <div className='flex-1'>
                            <h4 className="font-semibold">{step.step}. {step.title}</h4>
                            <p className="text-sm text-muted-foreground">{step.description}</p>
                        </div>
                    </div>
                )
             })}
        </div>
      </CardContent>
    </Card>
  );
}
