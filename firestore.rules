/**
 * @file VigilanteAI Firestore Security Rules
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for all data.
 * Users can only create, read, update, and delete their own data.
 *
 * @data_structure All data is nested under /users/{userId}, with further subcollections for scans and reports.
 * This hierarchical structure simplifies security rules and ensures data isolation between users.
 *
 * @key_security_decisions
 *   - User listing is explicitly denied for privacy.
 *   - All write operations are protected by authorization checks.
 *   - Data validation is limited to ownership fields to enable rapid iteration.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profiles. Only the authenticated user can create their own profile, and only the user can read or update their profile.
     * @path /users/{userId}
     * @allow (create) User 'na4xA27TTIX0QDdGdTXl8okLxEb2' can create their profile at /users/na4xA27TTIX0QDdGdTXl8okLxEb2.
     * @allow (get, update, delete) User 'na4xA27TTIX0QDdGdTXl8okLxEb2' can get, update, or delete their profile at /users/na4xA27TTIX0QDdGdTXl8okLxEb2.
     * @deny (create) User 'anotherUser' cannot create a profile at /users/na4xA27TTIX0QDdGdTXl8okLxEb2.
     * @deny (get, update, delete) User 'anotherUser' cannot get, update, or delete the profile at /users/na4xA27TTIX0QDdGdTXl8okLxEb2.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      // Verify identity
      function isSignedIn() {
        return request.auth != null;
      }

      // Check if the requested user id is the same as the authenticated user id
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;

      //Self-Creation:  A user can create their own document.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Manages scans for a specific user. Only the authenticated user can create, read, update, and delete their own scans.
     * @path /users/{userId}/scans/{scanId}
     * @allow (create) User 'na4xA27TTIX0QDdGdTXl8okLxEb2' can create a scan at /users/na4xA27TTIX0QDdGdTXl8okLxEb2/scans/scan123.
     * @allow (get, list, update, delete) User 'na4xA27TTIX0QDdGdTXl8okLxEb2' can get, list, update, or delete their scan at /users/na4xA27TTIX0QDdGdTXl8okLxEb2/scans/scan123.
     * @deny (create) User 'anotherUser' cannot create a scan at /users/na4xA27TTIX0QDdGdTXl8okLxEb2/scans/scan123.
     * @deny (get, list, update, delete) User 'anotherUser' cannot get, list, update, or delete the scan at /users/na4xA27TTIX0QDdGdTXl8okLxEb2/scans/scan123.
     * @principle Enforces document ownership and prevents cross-user data access.
     */
    match /users/{userId}/scans/{scanId} {
      // Verify identity
      function isSignedIn() {
        return request.auth != null;
      }

      // Check if the requested user id is the same as the authenticated user id
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Manages reports for a specific scan. Only the authenticated user who owns the scan can create, read, update, and delete reports.
     * @path /users/{userId}/scans/{scanId}/reports/{reportId}
     * @allow (create) User 'na4xA27TTIX0QDdGdTXl8okLxEb2' can create a report at /users/na4xA27TTIX0QDdGdTXl8okLxEb2/scans/scan123/reports/report456.
     * @allow (get, list, update, delete) User 'na4xA27TTIX0QDdGdTXl8okLxEb2' can get, list, update, or delete their report at /users/na4xA27TTIX0QDdGdTXl8okLxEb2/scans/scan123/reports/report456.
     * @deny (create) User 'anotherUser' cannot create a report at /users/na4xA27TTIX0QDdGdTXl8okLxEb2/scans/scan123/reports/report456.
     * @deny (get, list, update, delete) User 'anotherUser' cannot get, list, update, or delete the report at /users/na4xA27TTIX0QDdGdTXl8okLxEb2/scans/scan123/reports/report456.
     * @principle Enforces document ownership and maintains hierarchical data integrity.
     */
    match /users/{userId}/scans/{scanId}/reports/{reportId} {
      // Verify identity
      function isSignedIn() {
        return request.auth != null;
      }

      // Check if the requested user id is the same as the authenticated user id
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }
  }
}