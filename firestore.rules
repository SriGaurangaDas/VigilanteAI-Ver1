/**
 * @file VigilanteAI Firestore Security Rules
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for all data.
 * All data (users, scans, and reports) is nested under the /users/{userId} path,
 * ensuring that only the authenticated user can access their own data.
 *
 * @data_structure The Firestore database is structured as follows:
 * /users/{userId} - Stores user profile information.
 * /users/{userId}/scans/{scanId} - Stores website vulnerability scans initiated by the user.
 * /users/{userId}/scans/{scanId}/reports/{reportId} - Stores reports generated from scans.
 *
 * @key_security_decisions
 * - User listing is explicitly denied.
 * - All write operations are protected by an authorization check (isOwner()).
 * - The rules are designed for authorization independence: the userId is denormalized
 *   into the `scans` documents to enable secure list operations and avoid the need for
 *   `get()` calls in security rules. This approach ensures atomic operations and simplifies debugging.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) Authenticated user can create their own profile if the userId matches their auth.uid.
     * @allow (get, update, delete) Authenticated user can get, update, and delete their own profile.
     * @deny (create) Creating a profile with a userId that does not match the authenticated user's ID.
     * @deny (list) Listing all users is not allowed.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the user is the existing owner of the document.
      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      // Allow the user to create their own profile.  Must match auth.uid.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;

      // Allow the user to read their own profile.
      allow get: if isSignedIn() && isOwner(userId);

      // Allow the user to update their own profile, but prevent ID changes.
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;

      // Allow the user to delete their own profile.
      allow delete: if isExistingOwner(userId);

      // Do not allow listing all users.
      allow list: if false;
    }

    /**
     * @description Controls access to scan data for a specific user.
     * @path /databases/{database}/documents/users/{userId}/scans/{scanId}
     * @allow (create) Authenticated user can create a scan under their user ID.
     * @allow (get, list, update, delete) Authenticated user can get, list, update, and delete scans under their user ID.
     * @deny (create, get, list, update, delete) Operations are denied if the user is not authenticated or does not own the scan.
     * @principle Enforces document ownership for all operations on scans.
     */
    match /users/{userId}/scans/{scanId} {
      // Helper function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the user is the existing owner of the document.
      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      // Allow a user to create a scan if they are the owner.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;

      // Allow a user to read a scan if they are the owner.
      allow get: if isSignedIn() && isOwner(userId);

      // Allow a user to list their own scans.
      allow list: if isSignedIn() && isOwner(userId);

      // Allow a user to update a scan if they are the owner.
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;

      // Allow a user to delete a scan if they are the owner.
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to report data for a specific scan.
     * @path /databases/{database}/documents/users/{userId}/scans/{scanId}/reports/{reportId}
     * @allow (create) Authenticated user can create a report under their user ID and scan ID.
     * @allow (get, list, update, delete) Authenticated user can get, list, update, and delete reports under their user ID and scan ID.
     * @deny (create, get, list, update, delete) Operations are denied if the user is not authenticated or does not own the report.
     * @principle Enforces document ownership for all operations on reports.
     */
    match /users/{userId}/scans/{scanId}/reports/{reportId} {
      // Helper function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the user is the existing owner of the document.
      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      // Allow a user to create a report if they are the owner.
      allow create: if isSignedIn() && isOwner(userId);

      // Allow a user to read a report if they are the owner.
      allow get: if isSignedIn() && isOwner(userId);

      // Allow a user to list their own reports.
      allow list: if isSignedIn() && isOwner(userId);

      // Allow a user to update a report if they are the owner.
      allow update: if isExistingOwner(userId);

      // Allow a user to delete a report if they are the owner.
      allow delete: if isExistingOwner(userId);
    }
  }
}